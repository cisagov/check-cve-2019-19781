#!/usr/bin/env python

"""Check for the existence of CVE-2019-19781 on a host machine.

EXIT STATUS
    This utility exits with one of the following values:
    0   The host does not seem vulnerable
    1   Command was invoked incorrectly
    2   The host appears to be vulnerable
    >2  An error occurred.

For more information about this vulnerability see:
    https://nvd.nist.gov/vuln/detail/CVE-2019-19781

Usage:
  cve-2019-19781 [--log-level=LEVEL] <host>
  cve-2019-19781 (-h | --help)

Options:
  -h --help              Show this message.
  --log-level=LEVEL      If specified, then the log level will be set to
                         the specified value.  Valid values are "debug", "info",
                         "warning", "error", and "critical". [default: info]
"""

# Standard Python Libraries
import logging
import sys

# Third-Party Libraries
import docopt
import urllib3

from ._version import __version__

INSECURE_CONTENT = r"You don't have permission to access /vpns/"


def is_vulnerable(host):
    """Make an http request to a host to see if it vulnerable."""
    # Suppress insecure request warning
    logging.debug("Disabling insecure request warnings.")
    urllib3.disable_warnings(category=urllib3.exceptions.InsecureRequestWarning)

    # Prevent the relative paths from being normalized away
    logging.debug("Disabling URL normalization.")
    urllib3.util.url.NORMALIZABLE_SCHEMES = ()

    logging.debug("Creating connection pool")
    pool = urllib3.PoolManager(cert_reqs="CERT_NONE")

    # Build URL to solicit a telling response
    url = f"https://{host}/vpn/../vpns/"
    logging.debug(f"Connecting to {url}")
    response = pool.request("GET", url)

    logging.debug(f"Response status: {response.status}")

    decoded_data = response.data.decode()
    logging.debug(f"Data:\n{decoded_data}")

    return INSECURE_CONTENT in decoded_data


def main():
    """Parse arguments, handle logging, and call vulnerability check."""
    args = docopt.docopt(__doc__, version=__version__)
    # Set up logging
    log_level = args["--log-level"]
    try:
        logging.basicConfig(
            format="%(asctime)-15s %(levelname)s %(message)s", level=log_level.upper()
        )
    except ValueError:
        logging.critical(
            f'"{log_level}" is not a valid logging level.  Possible values '
            "are debug, info, warning, and error."
        )
        return 254

    host = args["<host>"]

    try:
        if is_vulnerable(host):
            logging.warn(f"{host} appears to be vulnerable.")
            result = 2
        else:
            logging.info(f"{host} does not appear to be vulnerable.")
            result = 0
    except urllib3.exceptions.MaxRetryError as err:
        logging.error(err.reason)
        result = 3

    # Stop logging and clean up
    logging.shutdown()
    return result


if __name__ == "__main__":
    sys.exit(main())
